import argparse
import json
import matplotlib.pyplot as plt
import numpy as np
from statistics import mean
import os
import shutil

# Map labels to predictable colors
STAT_NAMES_BOTH = ["upload", "download", "rm"]
STAT_NAMES_ARCHIVE_ONLY = ["download_small_file", "download_large_file"]
STAT_NAMES_ALL = STAT_NAMES_BOTH + STAT_NAMES_ARCHIVE_ONLY

STORAGE_TYPES = ["blob", "disk"]

cmap = plt.get_cmap('tab20')
colors = cmap(np.linspace(0, 1, len(STORAGE_TYPES)))


def main(args):
    """Analyze results of performance test file.
    
    cat perf-output.json | curl -F 'sprunge=<-' http://sprunge.us 
    wget http://sprunge.us/QQI92v -O perf-output.json

    python perf_analyze_results.py
    """
    os.makedirs(args.output_directory, exist_ok=True)
    shutil.rmtree(args.output_directory)
    os.makedirs(args.output_directory, exist_ok=True)
    with open(args.input_file, "r") as f:
        stats = json.load(f)

    for is_archive in (True, False):
        archive_label = "archive" if is_archive else "single_file"
        stat_names = STAT_NAMES_BOTH
        if is_archive:
            # These stats are measured for archive files only
            stat_names = stat_names + STAT_NAMES_ARCHIVE_ONLY
        for stat_name in stat_names:
            FIGSIZE = (6.0, 5.0)  # inches
            plt.figure(figsize=FIGSIZE)
            archive_text = "from an archive" if is_archive else "a single file"
            if stat_name in ("download", "upload", "rm"):
                archive_text = archive_text.replace("from ", "")
            title = f"Time taken to {stat_name} {archive_text}"
            plt.title(title)
            plt.xlabel("Uncompressed size (MB)")
            plt.ylabel("Time (s)")
            for storage_type in STORAGE_TYPES:
                file_sizes = list(stats[archive_label][storage_type].keys())  # [:2]
                times = list(stats[archive_label][storage_type].values())  # [:2]
                # print(archive_label, storage_type, stat_names, STAT_NAMES_BOTH)
                times = [mean(s[stat_name] for s in stat_list) for stat_list in times]
                plt.plot(
                    file_sizes,
                    times,
                    label=storage_type,
                    color=colors[STORAGE_TYPES.index(storage_type)],
                )

            filename = f"{archive_label}-{stat_name}"
            plt.legend()
            plt.savefig(os.path.join(args.output_directory, filename + ".png"))

    plt.legend()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Analyzes and graphs performance test results.')
    parser.add_argument(
        '--input_file',
        type=str,
        help='Input JSON file to read (should be generated by performance_test.py).',
        default='perf-output.json',
    )
    parser.add_argument(
        '--output_directory',
        type=str,
        help='Directory where to store output performance graphs.',
        default='perf-output',
    )

    # Parse args and run this script
    args = parser.parse_args()
    main(args)
